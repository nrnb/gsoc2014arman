<?xml version="1.0"?>
<!-- $Id: build.xml 263 2014-03-14 16:25:09Z niko-rodrigue $ -->

<project default ="usage" basedir=".">
	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->

	<target name="init">
		<tstamp>
			<format property="YEAR" pattern="yyyy"/>
		</tstamp>
		<property name="Name" value="System Biology Format Converter"/>
		<property name="name" value="sbfc"/>
		<property name="version" value="1.3.3"/>

		<property name="sbml2xpp.version" value="1.2"/>
		<property name="sbml2octave.version" value="1.0"/>
		<property name="sbml2biopax.version" value="3.1.1"/>

		<property name="year" value="${YEAR}"/>

		<echo message="----------- ${Name} ${version} [${year}] ------------"/>
		<echo message="-----------     ${TODAY}   ------------"/>
		<echo message="-----------     ${DSTAMP} ${TSTAMP}  ------------"/>

		<property environment="env"/>
		<property name="build.compiler" value="modern"/>
		<property name="build.sysclasspath" value="ignore"/>
		<property name="debug" value="on"/>
		<property name="optimize" value="off"/>
		<property name="deprecation" value="false"/>
		<property name="depend" value="true"/>
		<property name="verbose" value="false"/>

		<property name="build.number" value="${DSTAMP}-${TSTAMP}"/>
		<property name="build.name" value="${version} (build ${build.number})"/>

		<property name="src.dir" value="${basedir}/src"/>
		<property name="build.dir" value="${basedir}/build"/>
		<property name="build.src" value="${basedir}/build/src"/>
		<property name="build.dest" value="${basedir}/build/classes"/>
		<property name="build.javadocs" value="${basedir}/build/apidocs"/>
		<property name="jars.dir" value="${basedir}/lib"/>
		<property name="dist.root" value="${basedir}/dist"/>
		<property name="dist.dir" value="${dist.root}/${name}-${version}"/>
		<property name="package.dir" value="${basedir}/build/package"/>

		<filter token="year" value="${year}"/>
		<filter token="version" value="${version}"/>
		<filter token="date" value="${TODAY}"/>
		<filter token="log" value="true"/>
		<filter token="verbose" value="true"/>

		<!-- add everything needed to the classpath -->
		<!-- adjust the settings to your local environment -->
		<path id="sbfc.classpath">
			<fileset dir="${jars.dir}">
				<include name="*.jar"/>
				<exclude name="{name}.jar"/>
			</fileset>
		</path>
	</target>


	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target name="usage" depends="init">
		<echo message=""/>
		<echo message=""/>
		<echo message="${Name} Build file"/>
		<echo message="-------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=" available targets are:"/>
		<echo message=""/>
		<echo message="   compile  --> compiles the source code"/>
		<echo message="   jar      --> generates the ${name}-${version}.jar file"/>
		<echo message="   javadoc  --> generates the API documentation"/>
		<echo message="   clean    --> cleans up the directory"/>
		<echo message=""/>
		<echo message=" See the comments inside the build.xml file for more details."/>
		<echo message="-------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=""/>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}"/>
		<echo message="Done"/>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->
	<target name="prepare-src" depends="prepare">
		<!-- create directories -->
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.dest}"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${dist.root}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/log"/>


		<!-- copy src files -->
		<copy todir="${build.src}" overwrite="yes">
			<fileset dir="${src.dir}"
                        excludes="**/CVS*, **/*.class, **/*~, **/*.tgz">
			</fileset>
		</copy>
		<copy todir="${build.src}" overwrite="yes">
			<fileset dir="${basedir}"
		                        includes="log4j.properties">
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare-src">
		<javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           verbose="${verbose}"
           source="1.6"
           target="1.6"
           classpathref="sbfc.classpath">
		</javac>
	</target>


	<!-- =================================================================== -->
	<!-- Creates the class package                                           -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile">

		<copy todir="${build.dest}">
			<fileset dir="${build.src}"
                                 includes="**/*.png **/*.gif **/*.xsd **/*.xsl **/data/* **/*.xml **/*.properties">
			</fileset>
		</copy>

		<jar jarfile="${build.dir}/${name}-${version}.jar" basedir="${build.dest}"/>

		<copy todir="${basedir}/lib" preservelastmodified="true" overwrite="true" verbose="true">
			<fileset dir="${build.dir}"
                                 includes="${name}-${version}.jar">
			</fileset>
		</copy>
	</target>



	<!-- =================================================================== -->
	<!-- Creates the distribution                                            -->
	<!-- =================================================================== -->
	<target name="dist" depends="prepare-src">

		<!-- Creates the standard jar file -->

		<antcall target="clean"/>

		<antcall target="jar"/>

		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}.jar"/>
		<copy todir="${dist.root}" file="${build.dir}/${name}-${version}.jar"/>

		<!-- Creates and copy the generated javadoc -->
		<antcall target="javadoc"/>

		<copy todir="${dist.dir}/doc/api">
			<fileset dir="${build.javadocs}/" includes="**/*">
			</fileset>
		</copy>

		<!-- Copy the source files -->
		<copy todir="${dist.dir}/src">
			<fileset dir="${build.src}/" includes="**/*">
			</fileset>
		</copy>

		<!-- Copy all the dependencies jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="*.jar">
			</fileset>
		</copy>


		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="LICENSE.txt NEWS.txt README *.sh src/**/*.properties src/**/*.xml log4j.properties build.x miriam.xml">
			</fileset>
		</copy>
		<chmod dir="${dist.dir}" perm="ugo+rx" includes="*.sh"/>


		<copy todir="${dist.dir}/doc">
			<fileset dir="${basedir}/doc" includes="**/*.pdf **/*.jpg **/*.java" excludes="posters/** publications/** templates/**">

			</fileset>
		</copy>

		<!-- Creates the archives to be distributed -->
		<zip destfile="${dist.root}/${name}-${version}.zip">
			<zipfileset dir="${dist.root}" filemode="755" includes="${name}-${version}/*.sh"/>
			<zipfileset dir="${dist.root}" includes="${name}-${version}/**" excludes="${name}-${version}/*.sh"/>
		</zip>

		<tar destfile="${dist.root}/${name}-${version}.tar.gz" compression="gzip">
			<tarfileset dir="${dist.root}" filemode="755" includes="${name}-${version}/*.sh"/>
			<tarfileset dir="${dist.root}" includes="${name}-${version}/**" excludes="${name}-${version}/*.sh"/>
		</tar>

		<!-- Calls the individual distributions-->
		<antcall target="sbml2xpp_dist"/>
		<antcall target="sbml2octave_dist"/>
		<antcall target="sbml2biopax_dist"/>

		<!-- Restores the *.sh and lib folder -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="*.jar">
			</fileset>
		</copy>

		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="*.sh"/>
		</copy>
		<chmod dir="${dist.dir}" perm="ugo+rx" includes="*.sh"/>


	</target>

	<!-- If we do not clean the sources, the ant script will not be able to compile 
		 for the single converter distributions	!!!
	 -->

	<!-- =================================================================== -->
	<!-- Cleans the global sbfc distribution to prepare for a single         -->
	<!-- converter distribution.                                             -->
	<!-- =================================================================== -->
	<target name="converter.generic.clean">

		<!-- Deleting all unnecessary scripts -->
		<delete includeEmptyDirs="true" quiet="yes">
			<fileset dir="${dist.dir}" includes="**/*.sh"/>
		</delete>

		<!-- Including only the necessary scripts -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="sbfConverter.sh ${cname}*.sh updateMiriamRegistry.sh"/>
		</copy>
		<chmod dir="${dist.dir}" perm="ugo+rx" includes="*.sh"/>

		<!-- Cleaning the jar files folder -->
		<delete dir="${dist.dir}/lib" includeEmptyDirs="true" quiet="yes"/>
		<delete dir="${dist.dir}" quiet="yes" includes="${name}-${version}.jar"/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates a single converter distribution                             -->
	<!-- 		the property ${cname} and ${cversion} have to be set         -->
	<!-- 		before calling this task.                                    -->
	<!-- =================================================================== -->
	<target name="converter.generic.package">

		<!-- Renaming the sbfc folder to sbmlxpp -->
		<move todir="${dist.root}/${cname}-${cversion}">
			<fileset dir="${dist.root}/${name}-${version}" />
		</move>

		<!-- Creates the archives to be distributed -->
		<zip destfile="${dist.root}/${cname}-${cversion}.zip">
			<zipfileset dir="${dist.root}" filemode="755" includes="${cname}-${cversion}/*.sh" />
			<zipfileset dir="${dist.root}" includes="${cname}-${cversion}/**" excludes="${cname}-${cversion}/*.sh" />
		</zip>
		<tar destfile="${dist.root}/${cname}-${cversion}.tar.gz" compression="gzip">
			<tarfileset dir="${dist.root}" filemode="755" includes="${cname}-${cversion}/*.sh" />
			<tarfileset dir="${dist.root}" includes="${cname}-${cversion}/**" excludes="${cname}-${cversion}/*.sh" />
		</tar>

		<!-- Renaming the back sbfc folder -->
		<move todir="${dist.root}/${name}-${version}">
			<fileset dir="${dist.root}/${cname}-${cversion}" />
		</move>
		
	</target>

	<!-- =================================================================== -->
	<!-- Creates the sbml2xpp distribution                                   -->
	<!-- =================================================================== -->
	<target name="sbml2xpp_dist" depends="init">

		<!-- defining the converter specific name and version -->
		<property name="cname" value="sbml2xpp"/>
		<property name="cversion" value="${sbml2xpp.version}"/>

		<antcall target="converter.generic.clean"/>

		<!-- Including only the necessary jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="jsbml*.jar ${name}-${version}.jar">
			</fileset>
		</copy>

		<antcall target="converter.generic.package"/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the sbml2octave distribution                                -->
	<!-- =================================================================== -->
	<target name="sbml2octave_dist" depends="init">

		<!-- defining the converter specific name and version -->
		<property name="cname" value="sbml2octave"/>
		<property name="cversion" value="${sbml2octave.version}"/>

		<antcall target="converter.generic.clean"/>

		<!-- Including only the necessary jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="jsbml*.jar ${name}-${version}.jar">
			</fileset>
		</copy>

		<antcall target="converter.generic.package"/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the sbml2biopax distribution                                -->
	<!-- =================================================================== -->
	<target name="sbml2biopax_dist" depends="init">

		<!-- defining the converter specific name and version -->
		<property name="cname" value="sbml2biopax"/>
		<property name="cversion" value="${sbml2biopax.version}"/>

		<antcall target="converter.generic.clean"/>

		<!-- Including only the necessary jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="jsbml*.jar ${name}-${version}.jar miriam* paxtool*">
			</fileset>
		</copy>

		<antcall target="converter.generic.package"/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc packagenames="org.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             classpathref="sbfc.classpath"
             maxmemory="256m"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API"
             doctitle="${Name}"
    		 breakiterator="yes"
    >
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Cleans everything                                                   -->
	<!-- =================================================================== -->
	<target name="clean" depends="init">
		<delete includeEmptyDirs="true" quiet="yes">
			<fileset dir="${build.dir}" includes="**"/>
		</delete>
		<delete dir="${dist.root}" includeEmptyDirs="true" quiet="yes"/>
	</target>
</project>

<!-- End of file -->
